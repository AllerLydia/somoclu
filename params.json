{"name":"Somoclu","tagline":"Self-organizing maps on a cluster","body":"Somoclu\r\n==\r\nSomoclu is a cluster-oriented implementation of self-organizing maps. It relies on MPI for distributing the workload, and it can be accelerated by CUDA on a GPU cluster. A sparse kernel is also included, which is useful for training maps on vector spaces generated in text mining processes.\r\n\r\nKey features:\r\n\r\n* Fast execution by parallelization: OpenMP, MPI, and CUDA are supported.\r\n* Planar and toroid maps.\r\n* Both dense and sparse input data are supported.\r\n* Large maps of several hundred thousand neurons are feasible.\r\n* Integration with Databionic ESOM Tools.\r\n* Python, R, and MATLAB interfaces for the dense CPU kernel.\r\n\r\nFor more information, refer to the following paper:\r\n\r\nPeter Wittek (2013). Somoclu: An Efficient Distributed Library for Self-Organizing Maps. [arXiv:1305.1422](http://arxiv.org/abs/1305.1422).\r\n\r\n\r\nUsage\r\n==\r\nSomoclu takes a plain text input file -- either dense or sparse data. Example files are included.\r\n\r\n    $ [mpirun -np NPROC] somoclu [OPTIONs] INPUT_FILE OUTPUT_PREFIX\r\n\r\nArguments:\r\n\r\n    -c FILENAME              Specify an initial codebook for the map.\r\n    -e NUMBER                Maximum number of epochs\r\n    -k NUMBER                Kernel type\r\n                                0: Dense CPU\r\n                                1: Dense GPU\r\n                                2: Sparse CPU\r\n    -m TYPE                  Map type: planar or toroid (default: planar)\r\n    -t STRATEGY              Radius cooling strategy: linear or exponential (default: linear)\r\n    -r NUMBER                Start radius (default: half of the map in direction min(x,y))\r\n    -R NUMBER                End radius (default: 1)\r\n    -T STRATEGY              Learning rate cooling strategy: linear or exponential (default: linear)\r\n    -l NUMBER                Starting learning rate (default: 1.0)\r\n    -L NUMBER                Finishing learning rate (default: 0.01)\r\n    -s NUMBER                Save interim files (default: 0):\r\n                                0: Do not save interim files\r\n                                1: Save U-matrix only\r\n                                2: Also save codebook and best matching\r\n    -x, --columns NUMBER     Number of columns in map (size of SOM in direction x)\r\n    -y, --rows    NUMBER     Number of rows in map (size of SOM in direction y)\r\n\r\nExamples:\r\n\r\n    $ somoclu data/rgbs.txt data/rgbs\r\n    $ mpirun -np 4 somoclu -k 0 --rows 20 --columns 20 data/rgbs.txt data/rgbs\r\n\r\nInput File Formats\r\n==\r\nOne sparse and two dense data formats are supported. All of them are plain text files. The entries can be separated by any white-space character. One row represents one data instance across all formats. Comment lines starting with a hash mark are ignored.\r\n\r\nThe sparse format follows the [libsvm](http://www.csie.ntu.edu.tw/~cjlin/libsvm/) guidelines. The first feature is zero-indexed. For instance, the vector [ 1.2 0 0 3.4] is represented as the following line in the file:\r\n0:1.2 3:3.4. The file is parsed twice: once to get the number of instances and features, and the second time to read the data in the individual threads.\r\n\r\nThe basic dense format includes the coordinates of the data vectors, separated by a white-space. Just like the sparse format, this file is parsed twice to get the basic dimensions right. \r\n\r\nThe .lrn file of [Databionic ESOM Tools](http://databionic-esom.sourceforge.net/) is also accepted and it is parsed only once. The format is described as follows:\r\n\r\n% n\r\n\r\n% m\r\n\r\n% s1\t\ts2\t\t\t..\t\tsm\r\n\r\n% var_name1\tvar_name2\t\t..\t\tvar_namem\t\r\n\r\nx11\t\tx12\t\t\t..\t\tx1m\r\n\r\nx21\t\tx22\t\t\t..\t\tx2m\r\n\r\n.\t\t.\t\t\t.\t\t.\r\n\r\n.\t\t.\t\t\t.\t\t.\r\n\r\nxn1\t\txn2\t\t\t..\t\txnm\r\n\r\nHere n is the number of rows in the file, that is, the number of data instances. Parameter m defines the number of columns in the file. The next row defines the column mask: the value 1 for a column means the column should be used in the training. Note that the first column in this format is always a unique key, so this should have the value 9 in the column mask. The row with the variable names is ignore by Somoclu. The elements of the matrix follow -- from here, the file is identical to the basic dense format, with the addition of the first column as the unique key.\r\n\r\nIf the input file is sparse, but a dense kernel is invoked, Somoclu will execute and results will be incorrect. Invoking a sparse kernel on a dense input file is likely to lead to a segmentation fault.\r\n\r\nInterfaces\r\n==\r\nPython, R, and MATLAB interfaces are available for the dense CPU kernel. MPI, CUDA, and the sparse kernel are not support through the interfaces. The connection to the C++ library is seamless, data structures are not duplicated. For respective examples, see the folders in src. All versions require GCC to compile the code.\r\n\r\nThe Python version is also available in Pypi. You can install it with\r\n\r\n    $ sudo pip install somoclu\r\n    \r\nThe R version is available on CRAN. You can install it with\r\n    \r\n    install.packages(\"Rsomoclu\")\r\n\r\nFor using the MATLAB toolbox, define the location of the mex compiler in MEX_BIN. Then invoke makeMex.sh in the src/MATLAB folder.\r\n\r\nFor more information on the respective interfaces, refer to the subfolders in src.\r\n\r\nEfficient Parallel Execution\r\n==\r\nThe CPU kernels use OpenMP to load multicore processors. On a single node, this is more efficient than launching tasks with MPI to match the number of cores. The MPI tasks replicated the codebook, which is especially inefficient for large maps. \r\n\r\nFor instance, given a single node with eight cores, the following execution will use 1/8th of the memory, and will run 10-20% faster:\r\n\r\n    $ somoclu -x 200 -y 200 data/rgbs.txt data/rgbs\r\n\r\nOr, equivalently:\r\n\r\n    $ OMP_NUM_THREADS=8 somoclu -x 200 -y 200 data/rgbs.txt data/rgbs\r\n\r\nAvoid the following on a single node:\r\n\r\n    $ OMP_NUM_THREADS=1 mpirun -np 8 somoclu -x 200 -y 200 data/rgbs.txt data/rgbs\r\n\r\nThe same caveats apply for the sparse CPU kernel.\r\n\r\nVisualisation\r\n==\r\nThe primary purpose of generating a map is visualisation. Somoclu does not come with its own functions for visualisation, since there are numerous generic tools that are capable of plotting high-quality figures. \r\n\r\nThe output formats of the U-matrix and the codebook are compatible with [Databionic ESOM Tools](http://databionic-esom.sourceforge.net/) for more advanced visualisation.\r\n\r\nDependencies\r\n==\r\nThe only dependency is GCC, although other compiler chains might also work.\r\n\r\nDistributed systems and single-machine multicore execution is supported through MPI. The package was tested with OpenMPI, versions 1.3.2 and 1.6.5 were tested. It should also work with other MPI flavours. \r\n\r\nCUDA support is optional. CUDA versions 4.1, 5.0 and 5.5 are known to work.\r\n\r\nCompilation & Installation\r\n==\r\nFrom GIT repository first run\r\n\r\n    $ ./autogen.sh\r\n\r\nThen follow the standard POSIX procedure:\r\n\r\n    $ ./configure [options]\r\n    $ make\r\n    $ make install\r\n\r\n\r\nOptions for configure\r\n\r\n    --prefix=PATH           Set directory prefix for installation\r\n\r\n\r\nBy default Somoclu is installed into /usr/local. If you prefer a\r\ndifferent location, use this option to select an installation\r\ndirectory.\r\n\r\n    --without-mpi           Disregard any MPI installation found.\r\n    --with-mpi=MPIROOT      Use MPI root directory.\r\n    --with-mpi-compilers=DIR or --with-mpi-compilers=yes\r\n                              use MPI compiler (mpicxx) found in directory DIR, or\r\n                              in your PATH if =yes\r\n    --with-mpi-libs=\"LIBS\"  MPI libraries [default \"-lmpi\"]\r\n    --with-mpi-incdir=DIR   MPI include directory [default MPIROOT/include]\r\n    --with-mpi-libdir=DIR   MPI library directory [default MPIROOT/lib]\r\n\r\nThe above flags allow the identification of the correct MPI library the user wishes to use. The flags are especially useful if MPI is installed in a non-standard location, or when multiple MPI libraries are available.\r\n\r\n    --with-cuda=/path/to/cuda           Set path for CUDA\r\n\r\nSomoclu looks for CUDA in /usr/local/cuda. If your installation is not there, then specify the path with this parameter. If you do not want CUDA enabled, set the parameter to ```--without-cuda```.\r\n\r\nAcknowledgment\r\n==\r\nThis work was supported by the European Commission Seventh Framework Programme under Grant Agreement Number FP7-601138 PERICLES and by the AWS in Education Machine Learning Grant award.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}